/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.fast.develop.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.fast.develop.model.LiferayWorkspace;
import com.liferay.fast.develop.model.LiferayWorkspaceModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LiferayWorkspace service. Represents a row in the &quot;FASTDEPLOY_LiferayWorkspace&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LiferayWorkspaceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LiferayWorkspaceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LiferayWorkspaceImpl
 * @generated
 */
public class LiferayWorkspaceModelImpl
	extends BaseModelImpl<LiferayWorkspace> implements LiferayWorkspaceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a liferay workspace model instance should use the <code>LiferayWorkspace</code> interface instead.
	 */
	public static final String TABLE_NAME = "FASTDEPLOY_LiferayWorkspace";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"workspaceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"workspaceName", Types.VARCHAR}, {"location", Types.VARCHAR},
		{"buildType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workspaceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("workspaceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FASTDEPLOY_LiferayWorkspace (uuid_ VARCHAR(75) null,workspaceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,workspaceName VARCHAR(75) null,location VARCHAR(500) null,buildType VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table FASTDEPLOY_LiferayWorkspace";

	public static final String ORDER_BY_JPQL =
		" ORDER BY liferayWorkspace.workspaceName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FASTDEPLOY_LiferayWorkspace.workspaceName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long WORKSPACENAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public LiferayWorkspaceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _workspaceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWorkspaceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workspaceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LiferayWorkspace.class;
	}

	@Override
	public String getModelClassName() {
		return LiferayWorkspace.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LiferayWorkspace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LiferayWorkspace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LiferayWorkspace, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LiferayWorkspace)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LiferayWorkspace, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LiferayWorkspace, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LiferayWorkspace)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LiferayWorkspace, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LiferayWorkspace, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LiferayWorkspace>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LiferayWorkspace.class.getClassLoader(), LiferayWorkspace.class,
			ModelWrapper.class);

		try {
			Constructor<LiferayWorkspace> constructor =
				(Constructor<LiferayWorkspace>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LiferayWorkspace, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LiferayWorkspace, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LiferayWorkspace, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<LiferayWorkspace, Object>>();
		Map<String, BiConsumer<LiferayWorkspace, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LiferayWorkspace, ?>>();

		attributeGetterFunctions.put("uuid", LiferayWorkspace::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<LiferayWorkspace, String>)LiferayWorkspace::setUuid);
		attributeGetterFunctions.put(
			"workspaceId", LiferayWorkspace::getWorkspaceId);
		attributeSetterBiConsumers.put(
			"workspaceId",
			(BiConsumer<LiferayWorkspace, Long>)
				LiferayWorkspace::setWorkspaceId);
		attributeGetterFunctions.put("groupId", LiferayWorkspace::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LiferayWorkspace, Long>)LiferayWorkspace::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LiferayWorkspace::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LiferayWorkspace, Long>)LiferayWorkspace::setCompanyId);
		attributeGetterFunctions.put("userId", LiferayWorkspace::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LiferayWorkspace, Long>)LiferayWorkspace::setUserId);
		attributeGetterFunctions.put("userName", LiferayWorkspace::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<LiferayWorkspace, String>)
				LiferayWorkspace::setUserName);
		attributeGetterFunctions.put(
			"createDate", LiferayWorkspace::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LiferayWorkspace, Date>)
				LiferayWorkspace::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", LiferayWorkspace::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LiferayWorkspace, Date>)
				LiferayWorkspace::setModifiedDate);
		attributeGetterFunctions.put(
			"workspaceName", LiferayWorkspace::getWorkspaceName);
		attributeSetterBiConsumers.put(
			"workspaceName",
			(BiConsumer<LiferayWorkspace, String>)
				LiferayWorkspace::setWorkspaceName);
		attributeGetterFunctions.put("location", LiferayWorkspace::getLocation);
		attributeSetterBiConsumers.put(
			"location",
			(BiConsumer<LiferayWorkspace, String>)
				LiferayWorkspace::setLocation);
		attributeGetterFunctions.put(
			"buildType", LiferayWorkspace::getBuildType);
		attributeSetterBiConsumers.put(
			"buildType",
			(BiConsumer<LiferayWorkspace, String>)
				LiferayWorkspace::setBuildType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getWorkspaceId() {
		return _workspaceId;
	}

	@Override
	public void setWorkspaceId(long workspaceId) {
		_workspaceId = workspaceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getWorkspaceName() {
		if (_workspaceName == null) {
			return "";
		}
		else {
			return _workspaceName;
		}
	}

	@Override
	public void setWorkspaceName(String workspaceName) {
		_columnBitmask = -1L;

		_workspaceName = workspaceName;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public String getBuildType() {
		if (_buildType == null) {
			return "";
		}
		else {
			return _buildType;
		}
	}

	@Override
	public void setBuildType(String buildType) {
		_buildType = buildType;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LiferayWorkspace.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LiferayWorkspace.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LiferayWorkspace toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LiferayWorkspace>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LiferayWorkspaceImpl liferayWorkspaceImpl = new LiferayWorkspaceImpl();

		liferayWorkspaceImpl.setUuid(getUuid());
		liferayWorkspaceImpl.setWorkspaceId(getWorkspaceId());
		liferayWorkspaceImpl.setGroupId(getGroupId());
		liferayWorkspaceImpl.setCompanyId(getCompanyId());
		liferayWorkspaceImpl.setUserId(getUserId());
		liferayWorkspaceImpl.setUserName(getUserName());
		liferayWorkspaceImpl.setCreateDate(getCreateDate());
		liferayWorkspaceImpl.setModifiedDate(getModifiedDate());
		liferayWorkspaceImpl.setWorkspaceName(getWorkspaceName());
		liferayWorkspaceImpl.setLocation(getLocation());
		liferayWorkspaceImpl.setBuildType(getBuildType());

		liferayWorkspaceImpl.resetOriginalValues();

		return liferayWorkspaceImpl;
	}

	@Override
	public int compareTo(LiferayWorkspace liferayWorkspace) {
		int value = 0;

		value = getWorkspaceName().compareTo(
			liferayWorkspace.getWorkspaceName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LiferayWorkspace)) {
			return false;
		}

		LiferayWorkspace liferayWorkspace = (LiferayWorkspace)obj;

		long primaryKey = liferayWorkspace.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LiferayWorkspaceModelImpl liferayWorkspaceModelImpl = this;

		liferayWorkspaceModelImpl._originalUuid =
			liferayWorkspaceModelImpl._uuid;

		liferayWorkspaceModelImpl._originalGroupId =
			liferayWorkspaceModelImpl._groupId;

		liferayWorkspaceModelImpl._setOriginalGroupId = false;

		liferayWorkspaceModelImpl._originalCompanyId =
			liferayWorkspaceModelImpl._companyId;

		liferayWorkspaceModelImpl._setOriginalCompanyId = false;

		liferayWorkspaceModelImpl._setModifiedDate = false;

		liferayWorkspaceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LiferayWorkspace> toCacheModel() {
		LiferayWorkspaceCacheModel liferayWorkspaceCacheModel =
			new LiferayWorkspaceCacheModel();

		liferayWorkspaceCacheModel.uuid = getUuid();

		String uuid = liferayWorkspaceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			liferayWorkspaceCacheModel.uuid = null;
		}

		liferayWorkspaceCacheModel.workspaceId = getWorkspaceId();

		liferayWorkspaceCacheModel.groupId = getGroupId();

		liferayWorkspaceCacheModel.companyId = getCompanyId();

		liferayWorkspaceCacheModel.userId = getUserId();

		liferayWorkspaceCacheModel.userName = getUserName();

		String userName = liferayWorkspaceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			liferayWorkspaceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			liferayWorkspaceCacheModel.createDate = createDate.getTime();
		}
		else {
			liferayWorkspaceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			liferayWorkspaceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			liferayWorkspaceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		liferayWorkspaceCacheModel.workspaceName = getWorkspaceName();

		String workspaceName = liferayWorkspaceCacheModel.workspaceName;

		if ((workspaceName != null) && (workspaceName.length() == 0)) {
			liferayWorkspaceCacheModel.workspaceName = null;
		}

		liferayWorkspaceCacheModel.location = getLocation();

		String location = liferayWorkspaceCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			liferayWorkspaceCacheModel.location = null;
		}

		liferayWorkspaceCacheModel.buildType = getBuildType();

		String buildType = liferayWorkspaceCacheModel.buildType;

		if ((buildType != null) && (buildType.length() == 0)) {
			liferayWorkspaceCacheModel.buildType = null;
		}

		return liferayWorkspaceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LiferayWorkspace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LiferayWorkspace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LiferayWorkspace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LiferayWorkspace)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LiferayWorkspace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LiferayWorkspace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LiferayWorkspace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LiferayWorkspace)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LiferayWorkspace>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _workspaceId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _workspaceName;
	private String _location;
	private String _buildType;
	private long _columnBitmask;
	private LiferayWorkspace _escapedModel;

}